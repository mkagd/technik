// Test obliczania offsetu dat w harmonogramie
console.log('\nüß™ TEST OBLICZANIA PONIEDZIA≈ÅKU TYGODNIA:\n');

// Symuluj r√≥≈ºne dni tygodnia - tydzie≈Ñ 13-19 pa≈∫dziernika
const testDates = [
  { date: new Date('2025-10-13T10:00:00'), expected: '2025-10-13' }, // Poniedzia≈Çek
  { date: new Date('2025-10-14T10:00:00'), expected: '2025-10-13' }, // Wtorek
  { date: new Date('2025-10-15T10:00:00'), expected: '2025-10-13' }, // ≈öroda
  { date: new Date('2025-10-16T10:00:00'), expected: '2025-10-13' }, // Czwartek
  { date: new Date('2025-10-17T10:00:00'), expected: '2025-10-13' }, // PiƒÖtek
  { date: new Date('2025-10-18T10:00:00'), expected: '2025-10-13' }, // Sobota
  { date: new Date('2025-10-19T10:00:00'), expected: '2025-10-13' }, // Niedziela (koniec tygodnia)
];

const dayNames = ['Niedziela', 'Poniedzia≈Çek', 'Wtorek', '≈öroda', 'Czwartek', 'PiƒÖtek', 'Sobota'];

testDates.forEach(({ date: now, expected }) => {
  const dayOfWeek = now.getDay();
  // NOWY ALGORYTM
  const daysToMonday = dayOfWeek === 0 ? -6 : -(dayOfWeek - 1);
  const monday = new Date(now);
  monday.setDate(now.getDate() + daysToMonday);
  const result = monday.toISOString().split('T')[0];
  const status = result === expected ? '‚úÖ' : '‚ùå';
  
  console.log(`${status} ${dayNames[dayOfWeek]} ${now.toISOString().split('T')[0]} ‚Üí ${result} (expected: ${expected})`);
});

console.log('\n‚úÖ Wszystkie powinny zwracaƒá: 2025-10-13');
