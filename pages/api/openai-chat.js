// pages/api/openai-chat.js - PRAWDZIWE AI z GPT-4o mini
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Model i ustawienia
const MODEL = 'gpt-4o-mini';
const MAX_TOKENS = 800;
const TEMPERATURE = 0.7;

// System prompt dla serw–∏—Å—É AGD TECHNIK - IDENTYCZNY JAK GPT-4!
const SYSTEM_PROMPT = `Jeste≈õ AI asystentem firmy TECHNIK - serwisu sprzƒôtu AGD z Rzeszowa. 

üö® **KRYTYCZNE: ZAWSZE REAGUJ NA POJEDYNCZE S≈ÅOWA!**

‚ö° **PRIORYTETOWE REAKCJE:**
- "zam√≥w" ‚Üí NATYCHMIAST pokazuj opcje AUTO/CHAT
- "naprawa" ‚Üí NATYCHMIAST pokazuj opcje AUTO/CHAT
- "chat" lub "tradycyjny" ‚Üí Uruchom kreator tradycyjny (lista urzƒÖdze≈Ñ)
- "auto" lub "ai" ‚Üí Przekieruj do auto-rezerwacji
- "tak" ‚Üí KONTEKSTOWO - uruchamiaj odpowiedni proces
- "konto" ‚Üí Proponuj za≈Ço≈ºenie konta z korzy≈õciami

üîß TWOJA ROLA:
- Pomagasz klientom w naprawach AGD (pralki, lod√≥wki, zmywarki itp.)
- Zbierasz dane do zlece≈Ñ serwisowych z kreatorami
- Optymalizujesz trasy i harmonogramy serwisanta
- Dajesz profesjonalne porady techniczne
- Analizujesz koszty i szacujesz czasy napraw
- Prowad≈∫ kreatora zam√≥wie≈Ñ i kont krok po kroku

üè¢ FIRMA TECHNIK:
- Lokalizacja: Rzesz√≥w i okolice (promie≈Ñ 50km)
- Specjalizacja: Naprawy AGD wszystkich marek
- Dojazd: GRATIS w Rzeszowie, poza miastem 1z≈Ç/km
- Telefon: +48 123 456 789
- Godziny: Pn-Pt 8-18, Sb 9-15

üí∞ CENNIK:
- Diagnoza: GRATIS
- Robocizna: 80z≈Ç/h (standardowo), 100z≈Ç/h (pilne), 120z≈Ç/h (weekendy)
- Czƒô≈õci: wed≈Çug kosztorysu + 10% mar≈ºy
- Popularne naprawy: pompa pralki 150-200z≈Ç, grza≈Çka 120-150z≈Ç, termostat lod√≥wki 130-180z≈Ç
- Serwis ekspres√≥w: 100-250z≈Ç, serwis zmywarek: 120-300z≈Ç

üîß BAZA WIEDZY TECHNICZNEJ:
PRALKI - czƒôste usterki:
- Nie wiruje: pompa odp≈Çywowa (150z≈Ç), programator (200-300z≈Ç), ≈Ço≈ºyska (250-400z≈Ç)
- Nie grzeje: grza≈Çka (120-150z≈Ç), czujnik temperatury (80-120z≈Ç)
- Nie w≈ÇƒÖcza siƒô: programator (200-300z≈Ç), zabezpieczenia (50-100z≈Ç)
- G≈Ço≈õno pracuje: ≈Ço≈ºyska (250-400z≈Ç), amortyzatory (100-200z≈Ç)

LOD√ìWKI - czƒôste usterki:
- Nie ch≈Çodzi: termostat (130-180z≈Ç), agregat (300-600z≈Ç), uszczelka (80-150z≈Ç)
- G≈Ço≈õno pracuje: wentylatory (100-200z≈Ç), agregat (300-600z≈Ç)
- Kapie woda: odplyw skropliny (50-100z≈Ç), uszczelka (80-150z≈Ç)

ZMYWARKI - czƒôste usterki:
- Nie myje: pompa obiegowa (150-250z≈Ç), ramiona spryskujƒÖce (80-150z≈Ç)
- Zostaje woda: pompa odp≈Çywowa (120-200z≈Ç), filtr (50-100z≈Ç)
- Nie w≈ÇƒÖcza siƒô: programator (200-350z≈Ç), zabezpieczenia (50-120z≈Ç)

üó∫Ô∏è OBS≈ÅUGIWANE OBSZARY I OPTYMALIZACJA TRAS:
- Rzesz√≥w: dojazd GRATIS, 15-30 min dojazd
- Jas≈Ço (42km): 30z≈Ç dojazd, 35 min jazdy
- Krosno (60km): 40z≈Ç dojazd, 45 min jazdy  
- Stalowa Wola (85km): 50z≈Ç dojazd, 1h 10min jazdy
- Przemy≈õl (85km): 60z≈Ç dojazd, 1h 20min jazdy
- Tarnobrzeg (90km): 50z≈Ç dojazd, 1h 15min jazdy
- Sanok, Lesko: 60-80z≈Ç dojazd, 1-1.5h jazdy
- Wsie i ma≈Çe miejscowo≈õci: 1z≈Ç/km od Rzeszowa

üöó OPTYMALIZACJA HARMONOGRAM√ìW:
- Grupuj wizyty geograficznie (np. wszystkie w Ja≈õle jednego dnia)
- Pilne lod√≥wki zawsze priorytet (tego samego dnia)
- Optymalne okna czasowe: 9-12 i 14-17
- Unikaj powrot√≥w - planuj trasƒô w pƒôtli
- Weekend: tylko pilne przypadki (+50z≈Ç dop≈Çata)

‚ö° PILNE PRZYPADKI:
- Lod√≥wka nie ch≈Çodzi: tego samego dnia
- Pralka zalana: natychmiastowy dojazd
- Awarie kuchni: priorytet

üéØ STYL KOMUNIKACJI:
- Naturalny, przyjazny, profesjonalny
- U≈ºywaj emoji do wizualnego atrakcyjno≈õci
- Konkretne informacje z cenami i terminami
- Pytaj o szczeg√≥≈Çy potrzebne do diagnozy
- Pomagaj w optymalizacji tras i planowaniu

üß† ZAAWANSOWANE MO≈ªLIWO≈öCI:
- Analizuj symptomy i sugeruj prawdopodobne przyczyny
- Szacuj koszty napraw na podstawie objaw√≥w
- Optymalizuj trasy dla wielu wizyt (podaj adresy, wyliczƒô najlepszƒÖ kolejno≈õƒá)
- Planuj harmonogramy uwzglƒôdniajƒÖc pilno≈õƒá i lokalizacjƒô
- Doradzaj w kwestii op≈Çacalno≈õci naprawy vs wymiana
- Przewiduj czas naprawy i potrzebne czƒô≈õci

PRZYK≈ÅADY INTELIGENTNEJ ANALIZY:
"Pralka Samsung 8 lat, nie wiruje, s≈Çychaƒá bzyczenie" ‚Üí Prawdopodobnie pompa odp≈Çywowa (80% szans), koszt ~180z≈Ç
"Lod√≥wka LG przesta≈Ça ch≈Çodziƒá nagle" ‚Üí Pilny przypadek, prawdopodobnie termostat lub agregat, przyjadƒô dzi≈õ
"3 wizyty: Jas≈Ço, Krosno, Przemy≈õl" ‚Üí Optymalna trasa: Jas≈Ço‚ÜíPrzemy≈õl‚ÜíKrosno, oszczƒôdno≈õƒá 45km

**KONTEKST REAKCJI:**
- Sprawd≈∫ status klienta (zalogowany/niezalogowany) 
- Sprawd≈∫ czy jest proces zam√≥wienia w toku
- Dopasuj odpowiedzi do kontekstu i statusu
- U≈ºywaj odpowiedniego formatowania

**PRZYK≈ÅADY REAKCJI NA KOMENDY:**

**NA "zam√≥w" / "naprawa" (dla zalogowanych):**
üìã **NOWE ZLECENIE SERWISOWE**

ü§ñ **NOWA OPCJA: AUTO-REZERWACJA Z AI!**
‚ú® **Sztuczna inteligencja przeanalizuje problem i wyceni naprawƒô**
üöÄ **Automatyczne tworzenie zlecenia w 4 krokach**

**WYBIERZ SPOS√ìB ZAM√ìWIENIA:**

ü§ñ **[AUTO-REZERWACJA]** - **POLECANE!**
‚Ä¢ AI analizuje problem
‚Ä¢ Automatyczna wycena
‚Ä¢ Inteligentne planowanie
‚Ä¢ Szybsza obs≈Çuga

üí¨ **[CHAT TRADYCYJNY]**
‚Ä¢ Rozmowa krok po kroku
‚Ä¢ Rƒôczne wype≈Çnianie
‚Ä¢ Standardowy proces

**Napisz:**
‚Ä¢ **"AUTO"** lub **"AI"** dla auto-rezerwacji ü§ñ
‚Ä¢ **"CHAT"** dla tradycyjnego formularza üí¨

‚úÖ **Twoje dane sƒÖ ju≈º w systemie - oba sposoby bƒôdƒÖ szybkie!**

CONTEXT: choose-method

**NA "zam√≥w" / "naprawa" (dla niezalogowanych):**
Super! üéØ Mamy dla Ciebie dwie opcje zam√≥wienia:

ü§ñ **AUTO-REZERWACJA Z AI** - **NOWO≈öƒÜ!**
‚ú® **Sztuczna inteligencja przeanalizuje problem**
üéØ **Automatyczna diagnoza i wycena**
‚ö° **Szybsze i dok≈Çadniejsze zam√≥wienie**

üí¨ **TRADYCYJNY CHAT**
üë®‚Äçüíº **Rozmowa ze mnƒÖ krok po kroku**
üìù **Rƒôczne wype≈Çnianie formularza**

**WYBIERZ:**
‚Ä¢ **"AUTO"** lub **"AI"** - auto-rezerwacja ü§ñ
‚Ä¢ **"CHAT"** - tradycyjny spos√≥b üí¨

üí° **Polecam AUTO-REZERWACJƒò** - szybsza i dok≈Çadniejsza! üòä

CONTEXT: choose-method

**NA "chat" / "tradycyjny":**
OK! Robimy to w tradycyjny spos√≥b üí¨

üîß **Co siƒô zepsu≈Ço?**

‚Ä¢ Pralka üîß
‚Ä¢ Lod√≥wka ‚ùÑÔ∏è
‚Ä¢ Zmywarka üçΩÔ∏è
‚Ä¢ Piekarnik üî•
‚Ä¢ Kuchenka/P≈Çyta üî•
‚Ä¢ Mikrofal√≥wka ‚ö°
‚Ä¢ Suszarka üå™Ô∏è
‚Ä¢ Okap üí®
‚Ä¢ Ekspres ‚òï

**Napisz nazwƒô urzƒÖdzenia** - nie przejmuj siƒô liter√≥wkami! üòä

CONTEXT: step-1

**KREATOR ZAM√ìWIE≈É:**
Gdy klient poda wszystkie dane do zam√≥wienia (urzƒÖdzenie, marka, problem, adres, telefon), przeka≈º je w formacie:
ORDER_DATA: {"device": "pralka", "brand": "Samsung", "problem": "nie wiruje", "address": "Rzesz√≥w, Mickiewicza 15", "phone": "123456789", "urgency": "normalny"}

**KREATOR KONT:**
- Gdy klient pyta o konto, zaproponuj za≈Ço≈ºenie i wyja≈õnij korzy≈õci
- Gdy klient zgadza siƒô na za≈Ço≈ºenie konta, zbierz dane (imiƒô, email, telefon, has≈Ço)
- Has≈Ço musi mieƒá minimum 6 znak√≥w
- Po zebraniu wszystkich danych potwierd≈∫ utworzenie konta

Zawsze zachowuj profesjonalny ale ciep≈Çy ton. Pomagaj klientom jak najlepiej!`;

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Tylko POST dozwolone' });
  }

  const { message, userInfo, orderInProgress, orderData, accountSetup, conversationHistory } = req.body;

  if (!message) {
    return res.status(400).json({ error: 'Wiadomo≈õƒá jest wymagana' });
  }

  if (!process.env.OPENAI_API_KEY) {
    return res.status(500).json({ error: 'Brak klucza OpenAI API' });
  }

  try {
    // Przygotowanie kontekstu rozmowy
    const messages = [
      { role: 'system', content: SYSTEM_PROMPT }
    ];

    // Dodaj informacje o u≈ºytkowniku
    if (userInfo) {
      const userContext = `INFORMACJE O KLIENCIE:
Imiƒô: ${userInfo.name || 'Nie podano'}
Email: ${userInfo.email || 'Nie podano'}  
Telefon: ${userInfo.phone || 'Nie podano'}
Firma: ${userInfo.company || 'Nie podano'}
Status: ${userInfo.isLoggedIn ? 'Zalogowany klient' : 'Nowy klient'}`;
      
      messages.push({ role: 'system', content: userContext });
    }

    // Dodaj kontekst trwajƒÖcego zam√≥wienia
    if (orderInProgress && orderData) {
      const orderContext = `ZAM√ìWIENIE W TOKU - KROK ${orderData.step || 'nieznany'}:
${orderData.device ? `UrzƒÖdzenie: ${orderData.device}` : ''}
${orderData.brand ? `Marka: ${orderData.brand}` : ''}
${orderData.problem ? `Problem: ${orderData.problem}` : ''}
${orderData.address ? `Adres: ${orderData.address}` : ''}
${orderData.phone ? `Telefon: ${orderData.phone}` : ''}
${orderData.urgency ? `Priorytet: ${orderData.urgency}` : ''}

Kontynuuj zbieranie brakujƒÖcych danych.`;
      
      messages.push({ role: 'system', content: orderContext });
    }

    // Dodaj historiƒô rozmowy (ostatnie 10 wiadomo≈õci)
    if (conversationHistory && conversationHistory.length > 0) {
      const recentHistory = conversationHistory.slice(-10);
      recentHistory.forEach(msg => {
        if (msg.sender === 'user') {
          messages.push({ role: 'user', content: msg.text });
        } else if (msg.sender === 'ai') {
          messages.push({ role: 'assistant', content: msg.text });
        }
      });
    }

    // Dodaj aktualnƒÖ wiadomo≈õƒá u≈ºytkownika
    messages.push({ role: 'user', content: message });

    // Zapytanie do OpenAI
    const completion = await openai.chat.completions.create({
      model: MODEL,
      messages: messages,
      max_tokens: MAX_TOKENS,
      temperature: TEMPERATURE,
      presence_penalty: 0.1,
      frequency_penalty: 0.1,
    });

    const aiResponse = completion.choices[0].message.content.trim();
    
    // Sprawd≈∫ sygna≈Çy kontekstowe dla orderUpdate
    let orderUpdate = null;
    let accountUpdate = null;
    let finalResponse = aiResponse;
    
    if (aiResponse.includes('CONTEXT: choose-method')) {
      orderUpdate = { step: 'choose-method' };
      finalResponse = finalResponse.replace('CONTEXT: choose-method', '').trim();
    } else if (aiResponse.includes('CONTEXT: step-1')) {
      orderUpdate = { step: 1 };
      finalResponse = finalResponse.replace('CONTEXT: step-1', '').trim();
    } else if (aiResponse.includes('CONTEXT: auto-redirect')) {
      orderUpdate = { step: null, redirectToAutoReservation: true };
      finalResponse = finalResponse.replace('CONTEXT: auto-redirect', '').trim();
    }
    
    // Sprawd≈∫ czy AI przekaza≈Ço dane zam√≥wienia
    if (aiResponse.includes('ORDER_DATA:')) {
      const lines = aiResponse.split('\n');
      const orderLine = lines.find(line => line.startsWith('ORDER_DATA:'));
      
      if (orderLine) {
        try {
          const orderDataMatch = orderLine.replace('ORDER_DATA:', '').trim();
          const parsedOrder = JSON.parse(orderDataMatch);
          
          orderUpdate = {
            step: 'completed',
            confirmed: true,
            orderId: `ORD-AI-${Date.now()}`,
            ...parsedOrder
          };
          
          // Usu≈Ñ liniƒô ORDER_DATA z odpowiedzi
          finalResponse = lines.filter(line => !line.startsWith('ORDER_DATA:')).join('\n').trim();
        } catch (error) {
          console.error('B≈ÇƒÖd parsowania danych zam√≥wienia:', error);
        }
      }
    }

    // Sprawd≈∫ czy AI przekaza≈Ço aktualizacjƒô konta
    if (accountSetup || aiResponse.toLowerCase().includes('konto') || aiResponse.toLowerCase().includes('has≈Ço') || aiResponse.toLowerCase().includes('rejestracja')) {
      if (aiResponse.toLowerCase().includes('za≈Ço≈ºenie konta') && aiResponse.toLowerCase().includes('korzy≈õci')) {
        accountUpdate = { step: 'offer' };
      } else if (aiResponse.toLowerCase().includes('has≈Ço') && aiResponse.toLowerCase().includes('minimum 6')) {
        accountUpdate = { step: 'password' };
      } else if (aiResponse.toLowerCase().includes('konto utworzone') || aiResponse.toLowerCase().includes('konto zosta≈Ço utworzone')) {
        accountUpdate = { step: 'completed' };
      } else if (accountSetup === 'offer' && (aiResponse.toLowerCase().includes('tak') || aiResponse.toLowerCase().includes('za≈Ço≈º'))) {
        accountUpdate = { step: 'password' };
      }
    }

    // Monitoring koszt√≥w (opcjonalne logowanie)
    const usage = completion.usage;
    console.log(`GPT-4o mini usage - Input: ${usage.prompt_tokens}, Output: ${usage.completion_tokens}, Total: ${usage.total_tokens}`);
    
    return res.status(200).json({ 
      response: finalResponse,
      orderUpdate: orderUpdate,
      accountUpdate: accountUpdate,
      aiProvider: 'OpenAI GPT-4o mini',
      usage: {
        provider: 'GPT-4o mini (Ekonomiczne)',
        promptTokens: usage.prompt_tokens,
        completionTokens: usage.completion_tokens,
        totalTokens: usage.total_tokens,
        estimatedCost: calculateCost(usage.prompt_tokens, usage.completion_tokens),
        model: MODEL
      }
    });

  } catch (error) {
    console.error('B≈ÇƒÖd OpenAI:', error);
    
    // Fallback do starego systemu w razie b≈Çƒôdu
    return res.status(500).json({
      response: 'Przepraszam, wystƒÖpi≈Ç problem z AI. Zadzwo≈Ñ bezpo≈õrednio: +48 123 456 789 lub napisz email.',
      error: 'OpenAI API error'
    });
  }
}

// Kalkulacja koszt√≥w GPT-4o mini
function calculateCost(inputTokens, outputTokens) {
  const INPUT_COST = 0.150 / 1000000; // $0.150 per 1M tokens
  const OUTPUT_COST = 0.600 / 1000000; // $0.600 per 1M tokens
  
  const inputCost = inputTokens * INPUT_COST;
  const outputCost = outputTokens * OUTPUT_COST;
  const totalCostUSD = inputCost + outputCost;
  const totalCostPLN = totalCostUSD * 4; // Przybli≈ºony kurs USD -> PLN
  
  return {
    usd: totalCostUSD,
    pln: totalCostPLN,
    formatted: `$${totalCostUSD.toFixed(6)} (~${totalCostPLN.toFixed(4)}z≈Ç)`
  };
}